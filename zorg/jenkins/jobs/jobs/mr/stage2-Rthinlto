pipeline {
    agent { label 'MacPro' }

    parameters {
        string(name: 'GIT_REVISION', defaultValue: 'refs/heads/master', description: 'Git revision to build')
        string(name: 'ARTIFACT', defaultValue: 'mr-clang-stage1-RA/latest', description: 'description')
    }
    
    stages {
        stage('Checkout') {
            steps {
                dir('llvm-project') {
                    git branch: params.GIT_REVISION, url: 'https://github.com/llvm/llvm-project.git'
                }
                dir('llvm-zorg') {
                    //git 'https://github.com/llvm/llvm-zorg.git'
                    git 'https://github.com/azharudd/llvm-zorg.git'
                }
            }
        }
        stage('Build') {
            steps {
                timeout(300) {
                    sh '''
                    set -u
                    rm -rf build.properties

                    cd llvm-project
                    git tag -a -m "First Commit" first_commit 97724f18c79c7cc81ced24239eb5e883bf1398ef || true

                    git_desc=$(git describe --match "first_commit")
                    export GIT_DISTANCE=$(echo ${git_desc} | cut -f 2 -d "-")

                    sha=$(echo ${git_desc} | cut -f 3 -d "-")
                    export GIT_SHA=${sha:1}

                    cd -

                    echo "ARTIFACT=$JOB_NAME/clang-d$GIT_DISTANCE-g$GIT_SHA-t$BUILD_ID-b$BUILD_NUMBER.tar.gz" > build.properties

                    export PATH=$PATH:/usr/bin:/usr/local/bin

                    rm -rf clang-build clang-install *.tar.gz

                    python llvm-zorg/zorg/jenkins/monorepo_build.py fetch
                    python llvm-zorg/zorg/jenkins/monorepo_build.py clang build --thinlto --projects="clang;compiler-rt;libcxx;debuginfo-tests" --cmake-flag="-DLIBCXX_ENABLE_SHARED=OFF" --cmake-flag="-DLIBCXX_ENABLE_STATIC=OFF"
                    '''
                }
            }
        }

        stage('Test') {
            steps {
                timeout(120) {
                    sh '''
                    set -u
                    export PATH=$PATH:/usr/bin:/usr/local/bin

                    rm -rf clang-build/testresults.xunit.xml

                    python llvm-zorg/zorg/jenkins/monorepo_build.py clang test
                    '''
                }
                junit 'clang-build/testresults.xunit.xml'
            }
        }
    }
    post {
        always {	
            scanForIssues tool: clang()
        }
        /*failure {
            emailext subject: '$DEFAULT_SUBJECT',
                    presendScript: '$DEFAULT_PRESEND_SCRIPT',
                    postsendScript: '$DEFAULT_POSTSEND_SCRIPT',
                    recipientProviders: [
                            [$class: 'CulpritsRecipientProvider'],
                            [$class: 'DevelopersRecipientProvider'],
                            [$class: 'RequesterRecipientProvider'],
                    ],
                    replyTo: '$DEFAULT_REPLYTO',
                    to: 'chris.matthews@apple.com',
                    body:'$DEFAULT_CONTENT'

        }*/
        success {
            script {
                def props = readProperties(file: 'build.properties');
                build job: 'upload_artifact', wait: false, parameters: [string(name: 'ARTIFACT', value: props.ARTIFACT)]
            }
        }
    }
}